* Task
- Task [[file:Тестовое задание для промт-инженера - Google Документы.pdf]]
- Examples [[file:Выгрузка отзывов веб-скрапинг для промт-инженера - Лист1.csv]]

Generate customer reviews for product and try to hide that review was generated by LLM.

You can use any LLM.

You must do it in 3 days.

* Solution
I used basic tools: POSIX Shell script +
curl (for API requests) + jq (for JSON parsing).

As the complexity will grow, to properly choose complex tools it is better to start with lowest (commonly used as backand).

Two days I spent to get access to YandexGPT API: to insert credit card number and phone number, to get cloud ID, etc.

One day I spent for coding and writing this report about solution that generates customer reviews.

I generated this CSV file: TODO!!!!!!! Link to file will be added later

I added randomness to review with prompt "look at this color", random color adds emotional color to model and change it's inner state.

I made simple attempt to hide LLM intelligence with smiles.

I did not try chain of requests.

* Proposal for enhancement
** Problems that I see:
- LLM censorship at generating
- LLM stochastic behaviour problem
- LLM intelligence hiding
- censorship during posting
- not enough randomness

I see 3 ways to fight censorship:
- Self-hosted fine-tuned models with unique characteristics as a person
- Chains of advanced and constantly changing prompt engineering techniques to query corporate LLMs, possible with NN, constantly seeking new holes.
- Adversarial machine learning and Generative adversarial network (GAN) that simulate corporate censorship to be able "to strike back/first"

To hide intelligence and add randomness a careful prompt engineering should be enough for practical usage.

Stochastic behaviour problem is advanced problem binded with limitations of current LLMs and hardware.

** Further code enhancement
1) More careful error handling should be implemented
2) Should be compared with other solutions of such kind
3) Intelligence hiding should be much more careful
4) More randomness should be added with preceding collecting, e.q. profession of user, sex, etc.
5) Chain of queries should be tested and considered.
* Code of solution
*** Colors
#+name: colors-raw
#+begin_example
1. Ализариновый
2. Антрацитовый
3. Баклажан
4. Берилловый
5. Бирюзовый
6. Бланжевый
7. Бронзовый
8. Бургундия
9. Виридиан
10. Гранатовый
11. Гридеперлевый
12. Грушевый
13. Деним
14. Жжёного апельсина
15. Индиго
16. Какао
17. Карри
18. Кофейный
19. Кремовый
20. Лазурный
21. Лаймовый
22. Лавандовый
23. Лиловый
24. Маджента
25. Маковый
26. Маренго
27. Насыщенный синий
28. Оливковый
29. Охра
30. Палевый
31. Пюсовый
32. Пыльная роза
33. Ржавый
34. Сапфировый
35. Серебристый
36. Сизый
37. Сиреневый
38. Слоновая кость
39. Тауповый
40. Терракотовый
41. Тиффани
42. Ультрамарин
43. Умбра
44. Фисташковый
45. Фуксия
46. Хаки
47. Цвет морской волны
48. Цвет шампанского
49. Чернильный
50. Шоколадный
#+end_example

#+begin_src bash :stdin colors-raw :results output :session s1
get_color( ) {
    c=$(cat | grep -o " .*" | tr -d ' ')
    count=$(echo "$c" | wc -l)
    random_line_n=$(shuf -i 1-$count -n 1)
    echo "$c" | sed "$random_line_n!d"
}
get_color
#+end_src

** Create csv file
#+begin_src bash :results output
echo "Тональность,Текст" > /tmp/dobri_vigruzka.csv
#+end_src

** Main request to YandexGPT
#+begin_src bash :shebang #!/bin/bash :results output :stdin colors-raw :session s1
alias curl="proxychains -f /home/u/proxychains.conf curl 2>/dev/null"

get_color( ) {
    c=$(cat | grep -o " .*" | tr -d ' ')
    count=$(echo "$c" | wc -l)
    random_line_n=$(shuf -i 1-$count -n 1)
    echo "$c" | sed "$random_line_n!d"
}


yandexPassportOauthToken=y0_AgAAAABsj07pAATuwXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
FOLDERNAME=default

if [ -z "$IAM_TOKEN" ]; then
    IAM_TOKEN=$(curl -s -d "{\"yandexPassportOauthToken\":\"$yandexPassportOauthToken\"}" "https://iam.api.cloud.yandex.net/iam/v1/tokens" | jq -r .iamToken)
fi
if [ -z "$CLOUD_ID" ]; then
    CLOUD_ID=$(curl -s -H "Authorization: Bearer $IAM_TOKEN" https://resource-manager.api.cloud.yandex.net/resource-manager/v1/clouds | jq -r .clouds[0].id) # получить cloud id
fi
# curl -s --request GET -H "Authorization: Bearer $IAM_TOKEN" https://resource-manager.api.cloud.yandex.net/resource-manager/v1/folders -d "{\"cloudId\": \"$CLOUD_ID\"}" # получить список директорий в облаке
if [ -z "$FOLDER_ID" ]; then
    FOLDER_ID=$(curl -s --request GET -H "Authorization: Bearer $IAM_TOKEN" https://resource-manager.api.cloud.yandex.net/resource-manager/v1/folders -d "{\"cloudId\": \"$CLOUD_ID\"}" | jq -r ".folders[] | select(.name == \"$FOLDERNAME\") | .id ")
fi
model="gpt://$FOLDER_ID/yandexgpt/latest"
STREAM=false

REACTION="понравился"
REQUEST="посмотри внимательно на эти символы:  :) :-) :-D :D XD X-D ;) - это смайлики.
Представь, что ты человек женского пола HR, страдающая сильным
слабоумием, эмоциональными всплесками и пишущая без сложных пунктуаций и кавычек, обязательно вставляя смайлики, но мало.
Ты вошла в магазин c вывеской $(get_color) цвета (про это забудь) и купила сок под названием
Добрый. Пришла домой и хочешь рассказать своим подписчикам программистам (про программистов забудь) о соке,
который попробовала. Сок тебе "$REACTION", но тебе хочется
подбодрить людей и ты им говоришь, что довольна соком. Что бы ты написала им? Сделай от одного до четырех абзацев.
В конце поста добавь эти три символа: ###
Можешь от себя добавить в конце."

# REQUEST="посмотри внимательно на эти символы разделенные пробелами :) :-) :-D :D XD X-D ;)
# это смайлики. Дай пример любого текста со всеми этими смайликами."

# REQUEST="Дай мне длинный список сильно отличающихся цветов по одному слову каждый."

body=$(jq -n \
--arg model "$model" \
--argjson stream "$STREAM" \
--arg request "$REQUEST" \
'{modelUri: $model,
   completionOptions: {
    stream: $stream,
    temperature: 0.6,
    maxTokens: 2000
  },
  messages: [
    {
      role: "user",
      text: $request
    }
  ]
}')
# -- Main requiest:
r=$(curl --request POST \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $IAM_TOKEN" \
  -H "x-folder-id: $FOLDER_ID" \
  -d "$body" \
  "https://llm.api.cloud.yandex.net/foundationModels/v1/completion" 2>/dev/null)

# -- Error handeling
if [ $? != 0 ]; then
    echo ERROR!
fi
if [ "$(echo "$r" | jq -M 'has("error")')" = "true" ]; then
    echo $r | jq -M
    echo ERROR!
    echo $r | jq ".message" | fold -s -w 120
else
    # -- parsing:
    answer=$( echo "$r" | jq -r '.result.alternatives.[] | select(.status | endswith("FINAL")) | .message.text' | tr '\n' '^' | grep -o '.*###' | tr '^' '\n' | tr -d '#' )
    # -- Saving:
    echo "$REACTION"','"\"$answer\"" >> /tmp/dobri_vigruzka.csv
fi
#+end_src

#+RESULTS:

* conclusion
- I successfuly got access to Yandex GPT API RESTfull interface.
- I generated CSV file with reviews.
- I added randomness to reviews with simple prompt randomization.
- I made simple attempt to hide LLM intelligence with emojis/smiles.
- I added proposal to address problems/challenges and further enhance the code.

I did not attempt a chain of requests.
